TIPOS DE NODOS

Los tipos de nodos que vamos a tener son los siguientes:

FOLDER:

Definicion: Este nodo representa simplemente una estructura logica para acomodar los proyectos.

Reglas: Puede ser hijo solo de nodos de tipo folder, y admite como hijos solo nodos de tipo folder y device.

Datos:
	-data: title (nombre de la carpeta creada)
	-attr: rel (siempre es 'folder')
	-metadata: name (nombre de la carpeta creada)
	-children

Creacion: Cuando se crea un nodo de tipo folder, lo unico que interesa saber es el path hasta el nodo padre. Lo que ocurre es que se crea una carpeta en el directorio especificado, y se retorna un nodo de tipo folder.

Ejemplo: {data:'folder1', attr:{rel:'folder'}, metadata:{name:'folder1'}, children:[...]};

DEVICE:

Definicion: Este nodo representa un dispositivo o sistema electrico al cual se le han tomado mediciones.

Reglas: Puede ser hijo solo de nodos de tipo folder, y admite como hijos solo nodos de tipo data-block.

Datos:
	-data: title (nombre del device en la BD)
	-attr: rel (siempre es 'device'), id (el id generado para este device)
	-metadata: name (el nombre de la carpeta creada), caracteristicas del device (kva, potencia, etc)
	-children

Creacion: Cuando se crea un nodo de tipo device, debemos conocer el path hasta el nodo padre mas las caracteristicas del device. Lo que ocurre es que se crea una carpeta en el directorio especificado, se adiciona una entrada en la BD para el dispositivo (incluyendo el path hasta este) y se retorna un nodo de tipo device, con las caracteristicas del mismo como metadatos y con el id segun este sea generado.

Ejemplo: {data:'device1', attr:{rel:'device'}, metadata:{name:'device1', kva:34, power:22}, children:[...]};

DATA-BLOCK:

Definicion: Este nodo representa un agrupamiento logico de varios ficheros de datos. Constituye la unidad fundamental para la cual se realizan los analisis.

Reglas: Puede ser hijo solo de nodos de tipo device, y admite como hijos solo nodos de tipo file.

Datos:
	-data: title (nombre de la carpeta creada)
	-attr: rel (siempre es 'data-block')
	-metadata: name (el nombre de la carpeta creada)
	-children

Creacion: Cuando se crea un nodo de tipo data-block, debemos conocer solamente el id del device dentro del cual este se va a crear. Lo que ocurre es que se crea una carpeta en el directorio que representa el dispositivo y se retorna un nodo de tipo data-block.

Ejemplo: {data:'data-block1', attr:{rel:'data-block'}, metadata:{name:'data-block1'}, children:[...]};

FILE:

Definicion: Este nodo representa un fichero de datos cargado para ser analizado.

Reglas: Puede ser hijo solo de nodos de tipo data-block, y no admite hijos.

Datos:
	-data: title (nombre del fichero)
	-attr: rel (siempre es 'file')
	-metadata: name (el nombre del fichero), type (el tipo: harmo, power, etc.), default_parameter (El parametro a mostrar por defecto: I, H, etc). NOTA: para el caso de los ficheros de tipo harmo, se deberia especificar tambien a que magnitud pertenece la medicion (I1, I2, V1, V3???).

Creacion: Cuando se crea un nodo de tipo file, debemos conocer el id del dispositivo, el nombre del data-block en que este se va a agrupar y el tipo de file: harmo, power, fasor, etc. Lo que ocurre es que se copia el archivo para el directorio especificado por el data-blok, y se crea una entrada en la BD para este nuevo archivo.


Ejemplo: {data:'power', attr:{rel:'file'}, metadata:{name:'power', type:'power', default_parameter:'I'}, children:[...]};

CARGANDO ANALISIS CONTEXT

Para cargar un contexto de analisis, el usuario debe dar doble click sobre un data-block. Inmediatamente se genera una respuesta desde el servidor, con todos los datos para el analisis.

Lo que se necesita saber en el servidor para cargar un contexto de analisis es: id del device y nombre del data-block.
Todos los datos del analisis se obtiene desde la BD. El servidor debe enviar los datos suficientes para que en el cliente se puedan sguir generando peticiones asociadas al contexto de analisis creado. POr ejemplo, lo primero que se carga es el analisis de power, pero el usuario puede querer ver los analisis de armonicos tambien, por lo que el propio contexto debe saber como realizar esta peticion al servidor, ademas de tener disponibles todos los datos que se necesitan mandar.

Las peticiones que se realizan al servidor una vez cargado un contexto de analisis son del tipo: carga estos datos de estos ficheros y enviamelos. El contexto de analisis debe saber como interpretar los datos enviados desde el servidor y mostrarlos en el navegador. Esto quiere decir que cada tipo de analisis en el contexto creado debe conocer el path a los ficheros a los que esta asociado. Por ejemplo, el analisis de power debe conocer el camino al fichero power al que esta asociado. A la vez, el codigo en el cliente debe especificar el tipo de analisis que se pretende realizar, para que el servidor determine cuales son los parametros que debe leer y las configuraciones que debe devolver al cliente.