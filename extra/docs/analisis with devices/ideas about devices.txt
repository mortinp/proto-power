IDEA

Me he dado cuenta que la entidad alrededor de la que se realizan los analisis son los dispositivos/sistemas (transformadores, motores, etc). A veces se necesitan datos tanto de energia (power) como de armonicos para realizar un calculo, por lo que hay que encontrar una forma de poder unir los datos de dos ficheros separados. Las mediciones que se realizan de energia y armonicos se realizan para un dispositivo, por lo que es esta entidad la que engloba todos los datos recopilados en una medicion.

Actualmente yo estoy cargando los ficheros por separado, pero en realidad lo que deberia pasar es que se deberian cargar (o al menos tener un proxy de) ambos ficheros, de tal forma que se puedan acceder los datos simultaneamente en cualquier momento.

La idea entonces es que en vez de cargar explicitamente los ficheros en el projects tree view, lo que se deberia hacer es dar doble click sobre un dispositivo, el cual contiene ya las intancias de los analisis de power y harmonics, o al menos proxies que permitan cargarlos en cualquier momento. Asi, cuando carguemos un dispositivo, podemos cambiar de harmonics a power y viceversa sin tener que cargar los ficheros, pues el dispositivo ya contendria todo. De esta forma, se pueden brindar analisis que relacionen los datos de varios ficheros.

La organizacion de los dispositivos podria ser de la siguiente manera: cada dispositivos podria tener varias mediciones. Cada una de estas mediciones pueden tener solo un fichero de cada tipo de datos (power, harmonics, fasor, etc.). Entonces lo que se podria hacer es en vez de cargar (dar doble click a) un dispositivo completo, lo que se puede es cargar una de las mediciones del dispositivo.

IMPLEMENTACION

ENFOQUE 1: Los ususarios deberian poder crear su propia estructura de carpetas. Dentro de alguna carpeta se podrian poner los dispositivos, y dentro de estos los ficheros con las mediciones. Lo que sucede es que de los dispositivos se deben guardar varios datos/caracteristicas, por lo que una carpeta en un directorio no es la mejor manera de representar un dispositivo. Lo que se puede hacer es crear una carpeta que represente el dispositivo, y a la vez guardar en la BD las caracteristicas de dicho dispositivo, mas la direccion hacia la carpeta que lo representa. Dentro de esta carpeta se pueden tener tambien carpetas para las mediciones, y dentro de estas los ficheros. Los ficheros tambien deben tener una representacion en la BD, y se debe especificar el dispositivo al que pertenece, la medicion y el tipo de fichero (power, harmo, fasor, etc... solo se puede tener uno de cada tipo en la misma medicion).

Lo que se complejiza con este enfoque es la manera de construir el projects tree view, pues mientras recorramos los directorios, no sabemos el tipo de nodo que representa una carpeta (es un dispositivo??, es una medicion???). Lo que se puede hacer para resolver esto es adicionar un sufijo al nombre de las carpetas. Por ejemplo, el nombre de la carpeta de un dispositivo podria ser transformador1.device; en este caso usamos el sufijo .device para las carpetas que representan los dispositivos (para que esto funcione no se debe permitir poner nombres a las carpetas que terminen en alguno de los sufijos que se vayan a usar). De esta forma, en el servidor se pueden buscar las caracteristicas del dispositivo, medicion o fichero segun se encuentren los sufijos.

Pero con este enfoque existe otro problema. Se sabe que un directorio representa un dispositivo, pero como se puede saber que dispositivo exactamente representa este directorio... el 1, el 2, el 34???.

ENFOQUE 2: Me parece que el mejor enfoque es guardar la estructura en la BD, y construir el arbol a partir de los caminos/paths especificados en la BD. Por ejemplo, podemos tener que el dispositivo 1 tiene el path = pro1/folder1/device1. Si el fichero 1 que pertenece al dispositivo 1 tiene el path = measurement1/harmo, entonces el camino real al fichero es pro1/folder1/device1/measurement1/harmo.

Cuando se vaya a agregar un dispositivo, o una carpeta, o un fichero, lo unico que tendriamos que hacer es coger el camino al nodo padre y el camino del nuevo nodo es el camino al padre mas el nombre del nuevo nodo.

Los unicos conceptos que tendriamos que guardar en la BD serian los proyectos, dispositivos y ficheros (harmo, power, fasor, etc). Por otro lado, podriamos tener un nodo de tipo file_container/data_container/data_block, que seria el nodo que sirve para poner dentro los ficheros de datos. Este tipo de nodo es el unico que se le puede adicionar a los dispositivos. Asi, el camino a un fichero siempre seria de la forma path = container1/harmo, por ejemplo. Aqui, container1 es el nombre de un nodo de tipo file_container. Aqui tomamos la convencion de que el string antes del caracter '/' en el path de los ficheros es el nombre de su container. Un file_container sirve como un contenedor generico que agrupa ficheros de datos (uno de cada tipo).

De esta forma, para crear el tree view, lo que se asume es lo siguiente:

-El string antes del nombre del dispositivo en el path del dispositivo, representa una jerarquia de carpetas (rel='folder').
-El nombre del dispositivo representa un nodo dispositivo (rel='device')
-El path de un fichero siempre tiene la forma [container]/[file name]. [container] es el nombre del contenedor de ficheros.
-El path hasta un fichero de datos es [path to device]/[container]/[file name]
-Siempre se va a usar para un fichero el nombre del tipo de dato que este contenga. Por ejemplo, los ficheros de armonicos se van a llamar harmo.data; los de energia, power.data, etc.

NOTA: Los containers se pueden llamar data blocks!!!.

De todas formas tengo que ir creando un layout con directorios y carpetas paralelo a la BD, pues se necesita llevar traza de las carpetas que se crean, ademas de que los ficheros de datos van a ser accedidos en el disco mediante la direccion fisica real de el mismo dentro del directorio de los proyectos.

En conclusion, la creacion de un nuevo nodo depende del tipo de nodo (folder, device, data-block, file) mas el lugar en la jerarquia en que se va a crear el nodo (path hasta el nodo). En todos los casos, el nodo tiene una representacion como un directorio, o un archivo  en el caso de los ficheros de datos.

FOLDER: Cuando se crea un nodo de tipo folder, lo unico que interesa saber es el path hasta el nodo padre. Lo que ocurre es que se crea una carpeta en el directorio especificado, y se retorna un nodo de tipo folder.

DEVICE: Cuando se crea un nodo de tipo device, debemos conocer el path hasta el nodo padre mas las caracteristicas del device. Lo que ocurre es que se crea una carpeta en el directorio especificado, se adiciona una entrada en la BD para el dispositivo (incluyendo el path hasta este) y se retorna un nodo de tipo device, con las caracteristicas del mismo como metadatos y con el id segun este sea generado.

DATA-BLOCK: Cuando se crea un nodo de tipo data-block, debemos conocer solamente el id del device dentro del cual este se va a crear. Lo que ocurre es que se crea una carpeta en el directorio que representa el dispositivo y se retorna un nodo de tipo data-block.

FILE: Cuando se crea un nodo de tipo file, debemos conocer el id del dispositivo, el nombre del data-block en que este se va a agrupar y el tipo de file: harmo, power, fasor, etc. Lo que ocurre es que se copia el archivo para el directorio especificado por el data-blok, y se crea una entrada en la BD para este nuevo archivo.



(...)
Para poder almacenar en una misma estructura los datos de power y harmonics, tengo que crear una estrutura de datos que me lo permita; podria crear una estructura llamada AnalisisDataProvider. Para crear esta estructura se deberia crear una clase mas o menos asi:

class AnalisisDataProviderBuilder {
	public function getDataProvider(device, dataBlock, o) {

	}
}

Aqui el parametro 'o' es un objeto que indica lo que debe llevar el data provider; algo asi como:

array("power"=>array("I1", "I2", "I3"),
      "harmo"=>array("I1"=>array("THD-F"), "I2"=>array("THD-F"), "I3"=>array("THD-F")));
NOTA: Esta configuracion puede ser para el calculo del factor K para cargas con armonicos.

Los datos (ids) del device y el dataBlock se usan solo para obtener los paths y poder acceder a los ficheros. La clase debe ser lo suficientemente inteligente como para buscar los datos donde haga falta.




Nota: Algo importante es que los datos que no se usen en un momento dado no tienen por que estar cargados, por lo cual todo se deberia hacer de forma lazy, usando proxies con llamadas ajax al servidor.